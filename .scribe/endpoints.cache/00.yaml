## Autogenerated by Scribe. DO NOT MODIFY.

name: 'User Management'
description: |-

  APIs for managing users with multiple email addresses
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/users
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users with multiple email addresses
      subgroup: ''
      subgroupDescription: ''
      title: 'Get list of users'
      description: 'Retrieves a paginated list of users with optional search functionality.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      search:
        name: search
        description: 'Search by first name, last name, or phone number.'
        required: false
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'Number of items per page (default: 15).'
        required: false
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      page:
        name: page
        description: 'Page number (default: 1).'
        required: false
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      search: John
      per_page: 10
      page: 2
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "data": [
              {
                "id": 1,
                "first_name": "John",
                "last_name": "Doe",
                "full_name": "John Doe",
                "phone": "+1234567890",
                "primary_email": "john@example.com",
                "emails": [
                  {
                    "id": 1,
                    "email": "john@example.com",
                    "is_primary": true,
                    "verified_at": null,
                    "created_at": "2025-07-09T12:00:00.000000Z",
                    "updated_at": "2025-07-09T12:00:00.000000Z"
                  }
                ],
                "created_at": "2025-07-09T12:00:00.000000Z",
                "updated_at": "2025-07-09T12:00:00.000000Z"
              }
            ],
            "pagination": {
              "current_page": 1,
              "per_page": 15,
              "total": 1,
              "last_page": 1
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/users
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users with multiple email addresses
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new user'
      description: 'Creates a new user with at least one email address.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      first_name:
        name: first_name
        description: "The user's first name. Must not be greater than 255 characters."
        required: true
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      last_name:
        name: last_name
        description: "The user's last name. Must not be greater than 255 characters."
        required: true
        example: Doe
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      phone:
        name: phone
        description: "The user's phone number. Must not be greater than 20 characters."
        required: false
        example: '+1234567890'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      password:
        name: password
        description: "The user's password (minimum 8 characters). Must be at least 8 characters."
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      emails:
        name: emails
        description: 'Array of email objects (at least one required). Must have at least 1 items. Must not have more than 20 items.'
        required: true
        example:
          -
            email: john@example.com
            is_primary: true
          -
            email: john.work@example.com
            is_primary: false
        type: 'object[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'emails[].email':
        name: 'emails[].email'
        description: 'Email address. Must be a valid email address.'
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'emails[].is_primary':
        name: 'emails[].is_primary'
        description: 'Whether this email should be primary.'
        required: false
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      first_name: John
      last_name: Doe
      phone: '+1234567890'
      password: password123
      emails:
        -
          email: john@example.com
          is_primary: true
        -
          email: john.work@example.com
          is_primary: false
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "success": true,
            "message": "User created successfully",
            "data": {
              "id": 1,
              "first_name": "John",
              "last_name": "Doe",
              "full_name": "John Doe",
              "phone": "+1234567890",
              "primary_email": "john@example.com",
              "emails": [
                {
                  "id": 1,
                  "email": "john@example.com",
                  "is_primary": true,
                  "verified_at": null,
                  "created_at": "2025-07-09T12:00:00.000000Z",
                  "updated_at": "2025-07-09T12:00:00.000000Z"
                },
                {
                  "id": 2,
                  "email": "john.work@example.com",
                  "is_primary": false,
                  "verified_at": null,
                  "created_at": "2025-07-09T12:00:00.000000Z",
                  "updated_at": "2025-07-09T12:00:00.000000Z"
                }
              ],
              "created_at": "2025-07-09T12:00:00.000000Z",
              "updated_at": "2025-07-09T12:00:00.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "The given data was invalid.",
            "errors": {
              "first_name": [
                "The first name field is required."
              ],
              "emails.0.email": [
                "The email field is required."
              ]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users with multiple email addresses
      subgroup: ''
      subgroupDescription: ''
      title: 'Get user by ID'
      description: 'Retrieves a specific user by their ID with all associated email addresses.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "data": {
              "id": 1,
              "first_name": "John",
              "last_name": "Doe",
              "full_name": "John Doe",
              "phone": "+1234567890",
              "primary_email": "john@example.com",
              "emails": [
                {
                  "id": 1,
                  "email": "john@example.com",
                  "is_primary": true,
                  "verified_at": null,
                  "created_at": "2025-07-09T12:00:00.000000Z",
                  "updated_at": "2025-07-09T12:00:00.000000Z"
                }
              ],
              "created_at": "2025-07-09T12:00:00.000000Z",
              "updated_at": "2025-07-09T12:00:00.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\User] 1"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users with multiple email addresses
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user'
      description: |-
        Updates an existing user's information. If emails are provided,
        all existing emails will be replaced with the new ones.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      first_name:
        name: first_name
        description: "The user's first name. Must not be greater than 255 characters."
        required: false
        example: John
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      last_name:
        name: last_name
        description: "The user's last name. Must not be greater than 255 characters."
        required: false
        example: Doe
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      phone:
        name: phone
        description: "The user's phone number. Must not be greater than 20 characters."
        required: false
        example: '+1234567890'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      password:
        name: password
        description: 'New password (minimum 8 characters). Must be at least 8 characters.'
        required: false
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      emails:
        name: emails
        description: 'Array of email objects to replace existing ones. Must have at least 1 items.'
        required: false
        example:
          -
            email: john.new@example.com
            is_primary: true
          -
            email: john.work@example.com
            is_primary: false
        type: 'object[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'emails[].email':
        name: 'emails[].email'
        description: 'Email address. This field is required when <code>emails</code> is present. Must be a valid email address.'
        required: false
        example: john.new@example.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'emails[].is_primary':
        name: 'emails[].is_primary'
        description: 'Whether this email should be primary.'
        required: false
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      first_name: John
      last_name: Doe
      phone: '+1234567890'
      password: newpassword123
      emails:
        -
          email: john.new@example.com
          is_primary: true
        -
          email: john.work@example.com
          is_primary: false
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "User updated successfully",
            "data": {
              "id": 1,
              "first_name": "John",
              "last_name": "Doe",
              "full_name": "John Doe",
              "phone": "+1234567890",
              "primary_email": "john.new@example.com",
              "emails": [
                {
                  "id": 2,
                  "email": "john.new@example.com",
                  "is_primary": true,
                  "verified_at": null,
                  "created_at": "2025-07-09T12:00:00.000000Z",
                  "updated_at": "2025-07-09T12:00:00.000000Z"
                }
              ],
              "created_at": "2025-07-09T12:00:00.000000Z",
              "updated_at": "2025-07-09T12:00:00.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\User] 1"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/users/{id}'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users with multiple email addresses
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete user'
      description: 'Deletes a user and all associated data including email addresses.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "User deleted successfully"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\User] 1"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/users/{user_id}/send-welcome'
    metadata:
      groupName: 'User Management'
      groupDescription: |-

        APIs for managing users with multiple email addresses
      subgroup: ''
      subgroupDescription: ''
      title: 'Send welcome email'
      description: |-
        Queues welcome email jobs to be sent to all of the user's email addresses.
        The actual email sending is handled asynchronously via queues.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Welcome email job queued for 2 email addresses",
            "emails_count": 2,
            "emails": [
              "john@example.com",
              "john.work@example.com"
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "success": false,
            "message": "User has no email addresses"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\User] 1"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
